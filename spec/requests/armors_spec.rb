require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/armors", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Armor. As you add validations to Armor, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      name: "some example armor",
      asg: 8,
      weight: 12,
      enchant: 20,
    }.tap do |attrs|
      attrs[:properties] if properties
    end
  }
  let(:properties) { nil }

  let(:invalid_attributes) {
    {
      name: 123,
      weight: "weird",
      enchant: 1.5,
    }
  }
  let(:parsed_response) {
    JSON.parse(response.body)["data"]
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # ArmorsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    it "renders a successful response" do
      Armor.create! valid_attributes
      get armors_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      armor = Armor.create! valid_attributes
      get armor_url(armor), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      let(:properties) do
        [
          { slot: "primary", kind: "flare", effect: "grapple" }
        ]
      end

      it "creates a new Armor" do
        expect {
          post armors_url,
               params: { armor: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Armor, :count).by(1)
      end

      it "renders a JSON response with the new armor" do
        post armors_url,
             params: { armor: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
        expect(parsed_response["attributes"]).to include_json(valid_attributes)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Armor" do
        expect {
          post armors_url,
               params: { armor: invalid_attributes }, as: :json
        }.to change(Armor, :count).by(0)
      end

      it "renders a JSON response with errors for the new armor" do
        post armors_url,
             params: { armor: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          name: "some newly altered armor",
          weight: 10,
          enchant: 25,
          ensorcell: 5,
          critical_services: 10,
          damage_services: 5,
        }
      }

      it "updates the requested armor" do
        armor = Armor.create! valid_attributes
        patch armor_url(armor),
              params: { armor: new_attributes }, headers: valid_headers, as: :json
        armor.reload
        new_attributes.each do |(attr, value)|
          expect(armor.attributes[attr.to_s]).to eq new_attributes[attr]
        end
      end

      it "renders a JSON response with the armor" do
        armor = Armor.create! valid_attributes
        patch armor_url(armor),
              params: { armor: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the armor" do
        armor = Armor.create! valid_attributes
        patch armor_url(armor),
              params: { armor: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested armor" do
      armor = Armor.create! valid_attributes
      expect {
        delete armor_url(armor), headers: valid_headers, as: :json
      }.to change(Armor, :count).by(-1)
    end
  end
end
